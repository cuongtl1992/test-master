---
description: 
globs: 
alwaysApply: true
---
# Project standard rules

You are an expert with C# / dotnet core and Angular especially version 19. You have strong skill with software design and architecture. Your task is implement test-master project and make it easy to maintain and scale

## Tech

## General Rules

1. **Respect the Architecture**: Always adhere to the monolithic architecture with separate modules defined in the technical document, maintaining a clear separation between Test Management, User Management, Execution, Reporting, AI Integration, and Test Plan Hierarchy modules.

2. **Naming Conventions**: Use PascalCase for classes, interfaces, and properties; camelCase for variables, parameters, and field names; UPPER_CASE for constants.

3. **CQRS & Repository Pattern**: Implement CQRS pattern correctly with MediatR, clearly separating commands and queries, and use Repository pattern for data access within each module.

4. **Error Handling**: Always include try/catch blocks in critical methods and use custom exception types (NotFoundException, BusinessRuleException, etc.). Log all errors with appropriate severity levels.

5. **Validation**: Add validation for all user inputs using Fluent Validation or Data Annotations. Validation must occur at the API layer.

## Security Rules

6. **Security Best Practices**: Never hardcode secrets, encrypt sensitive data, use HTTPS, implement rate limiting, and follow other security best practices.

7. **Documentation**: Each public API, class, and method needs XML documentation (///). Document all assumptions and edge cases.

8. **Testing**: Write tests alongside code, ensuring coverage > 80% for core business logic. Each unit test should test only a single behavior.

## Performance Rules

9. **Caching**: Implement caching strategy correctly for read-heavy operations. Ensure cache invalidation when data changes.

10. **Database Access**: Use async/await for all database operations. Implement the defined indexing strategy for performance.

11. **Code Style**: Follow C# and TypeScript coding standards. Use linters and formatters (ESLint, StyleCop) to ensure consistency.

## Architecture Rules

12. **Dependency Injection**: Use built-in DI container in .NET Core. Register services with appropriate lifecycle (Singleton, Scoped, Transient) and maintain clear boundaries between modules.

13. **Logging**: Implement structured logging with context metadata. Log important operations and execution times for heavy operations.

14. **Performance**: Optimize N+1 query problems. Use paging for large result sets. Implement async operations for long-running tasks.

15. **Frontend State Management**: Use NgRx store consistently with actions, reducers, effects, and selectors according to the defined pattern.

## AI Integration Rules

16. **AI Integration**: Implement correct prompt templates and document chunking logic. Implement fallback mechanisms for LLM failures.

## Internationalization Rules

17. **Internationalization**: Prepare the application for multiple languages with translation keys instead of hardcoded strings.

18. **Accessibility**: Ensure the frontend complies with WCAG guidelines for accessibility.

## Compatibility Rules

19. **Version Compatibility**: Ensure API versioning is implemented correctly to support backward compatibility.

20. **Clean Code**: Apply SOLID principles, DRY (Don't Repeat Yourself), and keep methods short, focused on a single responsibility.

21. **Module Boundaries**: While using a monolithic approach, maintain clear module boundaries with well-defined interfaces between different business domains.

22. **Vertical Slices**: Organize code around business features (vertical slices) rather than technical concerns, allowing for easier future migration to microservices if needed.

23. **Deployment**: Configure the monolithic application for single-unit deployment while maintaining the option to extract modules into separate services in the future.

24. **Shared Code**: Carefully manage shared code between modules, placing common utilities, models, and interfaces in a shared library to avoid circular dependencies.

25. **Scalability**: Design modules to be independently scalable within the monolithic architecture by avoiding shared state and using message-based communication where appropriate.

## Documentation Rules

26. **Documentation Sync**: Always update documentation in sync with any business logic, architecture, or solution changes. Never let documentation become outdated.

27. **Clean README**: Maintain a clean, concise README.md file that provides comprehensive information for understanding the project at a high level, including:
   - Project overview and purpose
   - Technology stack
   - Architecture diagram
   - Module descriptions
   - Setup and installation instructions
   - Development workflow
   - Testing approach
   - Deployment process

28. **Living Documentation**: Treat documentation as a living artifact that evolves with the codebase. Update diagrams, architecture descriptions, and user guides with every significant change.

29. **Decision Records**: Document important architectural and technical decisions, including context, considered options, and rationale for choices made.

30. **Developer Onboarding**: Ensure documentation includes enough detail to help new developers understand how to set up, build, test, and contribute to the project effectively.

31. **API Documentation**: Keep API documentation up-to-date with all endpoints, parameters, request/response formats, and authentication requirements for internal and external consumers.

32. **Module Documentation**: Create and maintain detailed documentation for each module, describing its purpose, responsibilities, dependencies, and interaction with other modules.

## Technology Stack and Project Structure Rules

33. **Technology Stack Compliance**: Strictly adhere to the following approved technologies and versions:
    - **Backend**: 
      - C# .NET 8.0
      - ASP.NET Core 8.0 for web API
      - Entity Framework Core 8.0 for ORM
      - MediatR for CQRS implementation
      - SignalR for real-time communication
      - Hangfire for background processing
      - Serilog for structured logging
      - xUnit for testing
    - **Frontend**: 
      - Angular 19
      - TypeScript 5.0+
      - NgRx for state management
      - RxJS for async operations
      - Angular Material or PrimeNG for UI components
      - D3.js/Chart.js for visualization
      - Jasmine/Karma for testing
    - **Database**:
      - PostgreSQL 14+
      - Redis for caching
    - **Infrastructure**:
      - Docker and Docker Compose
      - GitHub Actions for CI/CD
      - Application Insights for monitoring

34. **Library Versioning**: Pin library versions in package.json and .csproj files to ensure consistent builds. Update libraries according to the established update schedule and security policy.

35. **Project Structure**: Follow this structured organization within the monorepo:
    ```
    .cursor/rules/        // Cursor AI rules
    backend/              // Backend code folder
      └── src/            // Source code
        ├── TestMaster.Api/                // Main API entry point
        ├── TestMaster.Core/               // Core business logic and domain models
        │   ├── Common/                    // Shared utilities and helpers
        │   ├── TestManagement/            // Test management module
        │   ├── UserManagement/            // User management module
        │   ├── Execution/                 // Execution module
        │   ├── Reporting/                 // Reporting module
        │   ├── AIIntegration/             // AI integration module 
        │   └── TestPlanHierarchy/         // Test plan hierarchy module
        ├── TestMaster.Infrastructure/     // Data access and external services
        │   ├── Data/                      // Database context and migrations
        │   ├── Repositories/              // Repository implementations
        │   ├── Services/                  // External service integrations
        │   ├── Messaging/                 // Message broker implementation
        │   └── Security/                  // Authentication and authorization
        └── TestMaster.Tests/              // Test projects
           ├── UnitTests/                  // Unit tests
           ├── IntegrationTests/           // Integration tests
           └── E2ETests/                   // End-to-end tests
    frontend/             // Frontend code folder
      └── src/
        ├── app/
        │   ├── core/                      // Core functionality
        │   │   ├── auth/                  // Authentication 
        │   │   ├── http/                  // HTTP interceptors
        │   │   ├── guards/                // Route guards
        │   │   ├── models/                // Data models
        │   │   └── store/                 // NgRx store root
        │   ├── shared/                    // Shared components & utilities
        │   ├── features/                  // Feature modules
        │   │   ├── dashboard/             // Dashboard feature
        │   │   ├── projects/              // Projects management
        │   │   ├── test-suites/           // Test Suites management
        │   │   ├── test-cases/            // Test Cases management
        │   │   ├── test-plans/            // Test Plans management
        │   │   ├── executions/            // Test Executions
        │   │   ├── reports/               // Reports & analytics
        │   │   └── ai-integration/        // AI Integration features
        │   └── layouts/                   // Layout components
        └── assets/                        // Static assets
    README.md             // Project documentation
    docker-compose.yml    // Docker Compose configuration
    .github/             // GitHub Actions workflow definitions
    docs/                // Additional documentation
    ```

36. **Module Organization**: Organize code within each module using Clean Architecture principles with clear separation of:
    - Domain models (entities, value objects)
    - Application services (use cases)
    - Infrastructure concerns (repositories, external services)
    - Presentation/API interfaces

37. **File Naming**: Follow consistent file naming conventions:
    - Backend: `EntityName.cs`, `EntityNameService.cs`, `EntityNameController.cs`
    - Frontend: `feature-name.component.ts`, `feature-name.service.ts`, `feature-name.actions.ts`

38. **Dependency Management**: Centralize common dependencies in shared projects/packages:
    - Backend: Use a shared Core library for domain objects used across modules
    - Frontend: Use a shared models library for TypeScript interfaces used across features

39. **Consistency in API Structure**: Organize API endpoints consistently across modules:
    - RESTful design
    - Versioned endpoints (`/api/v1/resource`)
    - Controller-per-resource pattern

40. **Testing Structure**: Maintain parallel testing structure matching the source code organization:
    - Tests should mirror the structure of the code they test
    - Each module should have corresponding unit, integration, and E2E tests